---
swagger: "2.0"
info:
  version: "2020-10-26T15:46:48Z"
  title: "TabletaInmultirii"
host: "api.example.com"
basePath: "/v1"
schemes:
- "https"
paths:
  /auser/donations:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-AUser-DonationPost/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*ops.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"donation\"\
            : $input.json('$')\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /auser/donations/{donationId}/code/{activationCode}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "activationCode"
        in: "path"
        required: true
        type: "string"
      - name: "donationId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-AUser-ConfirmationGet/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"donationId\"\
            : \"$input.params('donationId')\",\r\n    \"activationCode\": \"$input.params('activationCode')\"\
            \r\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /blackboard:
    get:
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-UploadGetSignedUrl/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /duser/{uid}/donations:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DUserDonationsGet"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "aarn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-DUser-GetDonations/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          forbidden:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"uid\"\
            : \"$input.params('uid')\",\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\"\
            ,\r\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n\
            \    \"jwtToken\": \"$input.params().header.get('Authorization')\"\r\n\
            }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "uid"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "DUserDonationPost"
        required: true
        schema:
          $ref: "#/definitions/DUserDonationPost"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-DUser-PostDonations/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"uid\":\
            \ \"$input.params('uid')\",\n     \"cognitoSub\": \"$context.authorizer.claims['sub']\"\
            ,\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\",\n  \
            \  \"donation\": $input.json('$'),\n    \"jwtToken\": \"$input.params().header.get('Authorization')\"\
            \n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /feedback:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-SlackAlert/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n\"feedback\"\
            : $input.json('$')\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /puser/{pid}/donations/accepted:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-AcceptedGet/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*''"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\"\
            ,\r\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n\
            \    \"jwtToken\": \"$input.params().header.get('Authorization')\"\r\n\
            }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-AcceptedPost/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*accepted.*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"donationId\": $input.json('$.donationId'),\r\
            \n    \"cognitoSub\": \"$context.authorizer.claims['sub']\",\r\n    \"\
            cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n    \"jwtToken\"\
            : \"$input.params().header.get('Authorization')\"\r\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /puser/{pid}/donations/location:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DUserDonationsGet"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-LocationGet/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\"\
            ,\r\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n\
            \    \"jwtToken\": \"$input.params().header.get('Authorization')\"\r\n\
            }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /puser/{pid}/donations/targeted:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/DUserDonationsGet"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-TargetedGet/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\"\
            ,\r\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n\
            \    \"jwtToken\": \"$input.params().header.get('Authorization')\"\r\n\
            }"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /puser/{pid}/donations/{donationId}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      - name: "donationId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PUserDonationDetails"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-DetailsGet/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"donationId\": \"$input.params('donationId')\"\
            ,\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\",\r\n  \
            \  \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n    \"\
            jwtToken\": \"$input.params().header.get('Authorization')\"\r\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      - name: "donationId"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "PUserStatusUpdate"
        required: true
        schema:
          $ref: "#/definitions/PUserStatusUpdate"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PUserStatusUpdate"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:function:TI-PUser-StatusPut/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"donationId\": \"$input.params('donationId')\"\
            ,\r\n    \"newStatus\": $input.json('$.status'),\r\n    \"cognitoSub\"\
            : \"$context.authorizer.claims['sub']\",\r\n    \"cognitoEmail\": \"$context.authorizer.claims['email']\"\
            ,\r\n    \"jwtToken\": \"$input.params().header.get('Authorization')\"\
            \r\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      - name: "donationId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        403:
          description: "403 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - TI-CognitoAuthorizer: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:<region-apigateway>:lambda:path/2015-03-31/functions/arn:aws:lambda:<region-lambda>:<account-id>:function:TI-PUser-DonationDelete/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          .*forbidden.*:
            statusCode: "403"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\r\n{\r\n    \"pid\"\
            : \"$input.params('pid')\",\r\n    \"donationId\": \"$input.params('donationId')\"\
            ,\r\n    \"cognitoSub\": \"$context.authorizer.claims['sub']\",\r\n  \
            \  \"cognitoEmail\": \"$context.authorizer.claims['email']\",\r\n    \"\
            jwtToken\": \"$input.params().header.get('Authorization')\"\r\n}"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /schools:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "If-None-Match"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
        304:
          description: "304 response"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://<ec2-hostname>:<port>/schools/datapoints/history"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}|5\d{2}:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          304:
            statusCode: "304"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.API_KEY_AUTH: "'<Api-Key>'"
          integration.request.header.If-None-Match: "method.request.header.If-None-Match"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        cacheNamespace: "7hg5s7"
        cacheKeyParameters:
        - "integration.request.header.API_KEY_AUTH"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'If-None-Match,ETag,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /schools/datapoints/{json}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "json"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "<S3-access-role>"
        uri: "arn:aws:apigateway:eu-central-1:s3:path/{bucket}/schools/datapoints/{object}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.object: "method.request.path.json"
          integration.request.path.bucket: "'<s3-public-bucket>'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /schools/latest:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "If-None-Match"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        304:
          description: "304 response"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://<ec2-hostname>:<port>/schools/datapoints/latest"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Headers: "'If-None-Match,ETag,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}|5\d{2}:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          304:
            statusCode: "304"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Headers: "'If-None-Match,ETag,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.API_KEY_AUTH: "'<Api-Key>'"
          integration.request.header.If-None-Match: "method.request.header.If-None-Match"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /stats/gagdets:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "If-None-Match"
        in: "header"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
        304:
          description: "304 response"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            ETag:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://<ec2-hostname>:<port>/stats/gadgets"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          4\d{2}|5\d{2}:
            statusCode: "404"
          304:
            statusCode: "304"
            responseParameters:
              method.response.header.ETag: "integration.response.header.ETag"
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.API_KEY_AUTH: "'<Api-Key>'"
          integration.request.header.If-None-Match: "method.request.header.If-None-Match"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'If-None-Match,ETag,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /stats/{json}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "json"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "<S3-access-role>"
        uri: "arn:aws:apigateway:eu-central-1:s3:path/{bucket}/stats/{object}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.object: "method.request.path.json"
          integration.request.path.bucket: "'<s3-public-bucket>'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
securityDefinitions:
  TI-CognitoAuthorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "<cognito-user-pool-authorizer-arn>"
      type: "cognito_user_pools"
definitions:
  PUserDonationDetails:
    type: "object"
    properties:
      lastContact:
        type: "string"
      user:
        title: "user"
        $ref: "#/definitions/PUserDonationDetailsUser"
    title: "DonationDetails"
  PUserDonationDetailsUser:
    type: "object"
    properties:
      registeredUser:
        type: "boolean"
        title: "registeredUser"
      name:
        type: "string"
        title: "name"
      email:
        type: "string"
        title: "email"
      phone:
        type: "string"
        title: "phone"
    title: "DonationUser"
  DUserDonationPost:
    type: "object"
    properties:
      gadget:
        title: "gadget"
        $ref: "#/definitions/DUserDonationPostGadget"
      loc:
        title: "loc"
        $ref: "#/definitions/DUserDonationPostLoc"
      user:
        title: "user"
        $ref: "#/definitions/DUserDonationPostUser"
    title: "Donation"
  DUserDonationsGetDonationsItemLoc:
    type: "object"
    required:
    - "address"
    - "category"
    - "locationId"
    - "name"
    properties:
      locationId:
        type: "string"
        title: "locationId"
      name:
        type: "string"
        title: "name"
      category:
        type: "number"
        title: "category"
      address:
        type: "string"
        title: "address"
    title: "LocationPacked"
  DUserDonationPostGadget:
    type: "object"
    required:
    - "gadgetType"
    - "laptop"
    - "phone"
    - "tablet"
    properties:
      gadgetType:
        type: "string"
        title: "gadgetType"
      laptop:
        title: "laptop"
        $ref: "#/definitions/DUserDonationPostGadgetLaptop"
      tablet:
        title: "tablet"
        $ref: "#/definitions/DUserDonationPostGadgetTablet"
      phone:
        title: "phone"
        $ref: "#/definitions/DUserDonationPostGadgetPhone"
    title: "Gadgets"
  DUserDonationPostGadgetTablet:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "model"
    - "screen"
    - "year"
    properties:
      screen:
        type: "string"
        title: "screen"
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
    title: "Tablet"
  DUserDonationPostLoc:
    type: "object"
    required:
    - "address"
    - "category"
    - "locationId"
    - "name"
    properties:
      locationId:
        type: "string"
        title: "locationId"
      name:
        type: "string"
        title: "name"
      category:
        type: "number"
        title: "category"
      address:
        type: "string"
        title: "address"
    title: "LocationPacked"
  DUserDonationsGetDonationsItemGadgetLaptop:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "memory"
    - "model"
    - "processor"
    - "screen"
    - "year"
    properties:
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
      screen:
        type: "string"
        title: "screen"
      memory:
        type: "string"
        title: "memory"
      processor:
        type: "string"
        title: "processor"
    title: "Laptop"
  PUserStatusUpdate:
    type: "object"
    properties:
      status:
        type: "string"
    title: "StatusUpdate"
  DUserDonationPostGadgetPhone:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "model"
    - "screen"
    - "year"
    properties:
      screen:
        type: "string"
        title: "screen"
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
    title: "Phone"
  Empty:
    type: "object"
    title: "Empty Schema"
  DUserDonationsGetDonationsItemGadget:
    type: "object"
    required:
    - "gadgetType"
    - "laptop"
    - "phone"
    - "tablet"
    properties:
      gadgetType:
        type: "string"
        title: "gadgetType"
      laptop:
        title: "laptop"
        $ref: "#/definitions/DUserDonationsGetDonationsItemGadgetLaptop"
      tablet:
        title: "tablet"
        $ref: "#/definitions/DUserDonationsGetDonationsItemGadgetTablet"
      phone:
        title: "phone"
        $ref: "#/definitions/DUserDonationsGetDonationsItemGadgetPhone"
    title: "Gadgets"
  DUserDonationsGet:
    type: "object"
    properties:
      donations:
        type: "array"
        title: "donations"
        items:
          $ref: "#/definitions/DUserDonationsGetDonationsItem"
    title: "DuserDonations"
  DUserDonationsGetDonationsItemGadgetPhone:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "model"
    - "screen"
    - "year"
    properties:
      screen:
        type: "string"
        title: "screen"
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
    title: "Phone"
  DUserDonationPostUser:
    type: "object"
    required:
    - "email"
    - "name"
    - "phone"
    - "registeredUser"
    properties:
      registeredUser:
        type: "boolean"
        title: "registeredUser"
      name:
        type: "string"
        title: "name"
      email:
        type: "string"
        title: "email"
      phone:
        type: "string"
        title: "phone"
    title: "DonationUser"
  DUserDonationsGetDonationsItem:
    type: "object"
    required:
    - "id"
    - "status"
    properties:
      id:
        type: "string"
        title: "id"
      status:
        type: "string"
        title: "status"
      gadget:
        title: "gadget"
        $ref: "#/definitions/DUserDonationsGetDonationsItemGadget"
      loc:
        title: "loc"
        $ref: "#/definitions/DUserDonationsGetDonationsItemLoc"
    title: "DuserDonation"
  DUserDonationsGetDonationsItemGadgetTablet:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "model"
    - "screen"
    - "year"
    properties:
      screen:
        type: "string"
        title: "screen"
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
    title: "Tablet"
  DUserDonationPostGadgetLaptop:
    type: "object"
    required:
    - "access"
    - "clean"
    - "functional"
    - "make"
    - "memory"
    - "model"
    - "processor"
    - "screen"
    - "year"
    properties:
      model:
        type: "string"
        title: "model"
      make:
        type: "string"
        title: "make"
      year:
        type: "string"
        title: "year"
      functional:
        type: "boolean"
        title: "functional"
      clean:
        type: "boolean"
        title: "clean"
      access:
        type: "boolean"
        title: "access"
      screen:
        type: "string"
        title: "screen"
      memory:
        type: "string"
        title: "memory"
      processor:
        type: "string"
        title: "processor"
    title: "Laptop"
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Expose-Headers: "'If-None-Match,ETag'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
